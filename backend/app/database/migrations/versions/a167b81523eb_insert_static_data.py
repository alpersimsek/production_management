"""Insert static data

Revision ID: a167b81523eb
Revises: dc035aab18b5
Create Date: 2025-02-18 09:46:14.998641

"""
from typing import Sequence, Union
from database.models import Product, Preset, Rule, PresetRule
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a167b81523eb'
down_revision: Union[str, None] = 'dc035aab18b5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Insert Products
    op.bulk_insert(
        Product.__table__,
        [
            {"name": "GSX 9000"},
            {"name": "C3 Gateway Controller"},
            {"name": "G9 Media Gateway"}
        ]
    )
    
    # Insert Presets (assuming you know the product ids; adjust accordingly)
    op.bulk_insert(
        Preset.__table__,
        [
            {"name": "SYS Log", "product_id": 1, "header": "SYS"},
            {"name": "DBG Log", "product_id": 1, "header": "DBG"},
            {"name": "TRC Log", "product_id": 1, "header": "TRC"},
        ]
    )
    
    # Insert Rules (storing JSON config as string if needed)
    op.bulk_insert(
        Rule.__table__,
        [
            {
                "name": "IPV4 Address",
                "category": "IPV4_ADDR",
                "config": 
                    {
                        "type": "regex",
                        "pattern": r"\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b", 
                    }
                
            },
            {
                "name": "MAC Address",
                "category": "MAC_ADDR",
                "config": 
                    {
                        "type": "regex",
                        "pattern": r"(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})"
                    }
            }
        ]
    )
    
    # Insert PresetRules linking presets and rules
    op.bulk_insert(
        PresetRule.__table__,
        [
            {
                "preset_id": 1, 
                "rule_id": 1, 
                "action": 
                    {
                        "type": "replace"
                    }
            },
            {
                "preset_id": 1, 
                "rule_id": 2, 
                "action": 
                    {
                        "type": "replace"
                    }
            },
        ]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Delete in reverse order of insertion to satisfy foreign key constraints
    op.execute("DELETE FROM preset_rules")
    op.execute("DELETE FROM rules")
    op.execute("DELETE FROM presets")
    op.execute("DELETE FROM products")
    # ### end Alembic commands ###