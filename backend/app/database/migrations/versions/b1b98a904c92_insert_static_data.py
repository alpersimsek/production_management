"""insert static data

Revision ID: b1b98a904c92
Revises: d0d5c466d92b
Create Date: 2025-03-05 23:49:14.973347

"""

from typing import Sequence, Union
import logging
from alembic import op
import sqlalchemy as sa
from database.models import Product, Preset, Rule, PresetRule

logger = logging.getLogger("alembic.migration")


# revision identifiers, used by Alembic.
revision: str = "b1b98a904c92"
down_revision: Union[str, None] = "d0d5c466d92b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    logger.info("Starting static data insertion migration")

    # Insert Products
    logger.info("Starting Product insertion")
    op.bulk_insert(
        Product.__table__,
        [
            {"id": 1, "name": "Generic"},
            {"id": 2, "name": "GSX 9000"},
            {"id": 3, "name": "C3 Call Controller"},
            {"id": 4, "name": "G9 Media Gateway"},
            {"id": 5, "name": "SBC 7000"},
            {"id": 6, "name": "C20 Call Controller"},
            {"id": 7, "name": "Application Server"},
        ],
    )
    logger.info("Product insertion completed")

    # Verify products were inserted
    connection = op.get_bind()
    product_count = connection.execute(
        sa.select(sa.func.count()).select_from(Product.__table__)
    ).scalar()
    logger.info(f"Product count after insertion: {product_count}")

    # List all products for verification
    products = connection.execute(sa.select(Product.__table__)).fetchall()
    for product in products:
        logger.info(f"Inserted product: ID={product.id}, Name={product.name}")

    # Insert Presets
    logger.info("Starting Preset insertion")
    op.bulk_insert(
        Preset.__table__,
        [
            {
                "id": 1,
                "name": "Default",
                "product_id": 1,
                "header": "",
            },
            {
                "id": 2,
                "name": "SYS Log",
                "product_id": 2,
                "header": "SYS",
            },
            {
                "id": 3,
                "name": "DBG Log",
                "product_id": 2,
                "header": "DBG",
            },
            {
                "id": 4,
                "name": "TRC Log",
                "product_id": 2,
                "header": "TRC",
            },
        ],
    )
    logger.info("Preset insertion completed")

    # Insert Rules
    logger.info("Starting Rule insertion")
    op.bulk_insert(
        Rule.__table__,
        [
            {
                "id": 1,
                "name": "IPV4 Address",
                "category": "IPV4_ADDR",
                "config": {
                    "type": "regex",
                    "pattern": r"\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b",
                },
            },
            {
                "id": 2,
                "name": "MAC Address",
                "category": "MAC_ADDR",
                "config": {
                    "type": "regex",
                    "pattern": r"(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})",
                },
            },
        ],
    )
    logger.info("Rule insertion completed")

    # Insert PresetRules linking presets and rules
    logger.info("Starting PresetRule insertion")
    op.bulk_insert(
        PresetRule.__table__,
        [
            # Default preset
            {"id": 1, "preset_id": 1, "rule_id": 1, "action": {"type": "replace"}},
            {"id": 2, "preset_id": 1, "rule_id": 2, "action": {"type": "replace"}},
            # SYS Log preset
            {"id": 3, "preset_id": 2, "rule_id": 1, "action": {"type": "replace"}},
            {"id": 4, "preset_id": 2, "rule_id": 2, "action": {"type": "replace"}},
            # DBG Log preset
            {"id": 5, "preset_id": 3, "rule_id": 1, "action": {"type": "replace"}},
            {"id": 6, "preset_id": 3, "rule_id": 2, "action": {"type": "replace"}},
            # TRC Log preset
            {"id": 7, "preset_id": 4, "rule_id": 1, "action": {"type": "replace"}},
            {"id": 8, "preset_id": 4, "rule_id": 2, "action": {"type": "replace"}},
        ],
    )
    logger.info("PresetRule insertion completed")
    logger.info("Migration complete")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Delete in reverse order of insertion to satisfy foreign key constraints
    logger.info("Starting downgrade")
    logger.info("Deleting preset_rules")
    op.execute("DELETE FROM preset_rules")
    logger.info("Deleting rules")
    op.execute("DELETE FROM rules")
    logger.info("Deleting presets")
    op.execute("DELETE FROM presets")
    logger.info("Deleting products")
    op.execute("DELETE FROM products")
    logger.info("Downgrade complete")
    # ### end Alembic commands ###
